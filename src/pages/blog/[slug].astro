---
export const prerender = true;
import Breadcrumbs from '@components/breadcrumbs/Breadcrumbs.astro';
import {
   ArticleAuthor,
   ArticleAuthorContainer,
   ArticleInfoContainer,
   ArticleNavigation,
   ArticleReadingTime,
   ArticleTools,
} from '@components/article';
import CodeBlock from '@components/markdown/CodeBlock.astro';
import MarkdownImages from '@components/markdown/MarkdownImages.astro';
import NormalizeLinks from '@components/markdown/NormalizeLinks.astro';
import Tags from '@components/tags/Tags.astro';
import MainLayout from '@layouts/MainLayout.astro';
import '@styles/blog.css';
import { Markdown } from 'astro-remote';
import { getCollection } from 'astro:content';
import { ViewTransitions } from 'astro:transitions';
import { Icon } from 'astro-icon';
import { findRelatedPostsByTag, slugify } from '@js/utils';
import RelatedArticles from '@components/RelatedArticles.astro';
import TagHeading from '@components/common/TagHeading.astro';
import FormCommentGiscus from '@components/FormCommentGiscus.astro';
import { PostCardCategory } from '@components/postcard';
import ArticleContainer from '@components/article/ArticleContainer.astro';
import Modal from '@components/modal/Modal.astro';
import SocialShareTitle from '@components/social-share/SocialShareTitle.astro';
import SocialShareOptions from '@components/social-share/SocialShareOptions.astro';
import SocialShareFooter from '@components/social-share/SocialShareFooter.astro';

export async function getStaticPaths() {
   const blogEntries = await getCollection('blog');

   return blogEntries.map((entry, indexEntry) => ({
      params: { slug: entry.slug },
      props: {
         entry,
         indexEntry,
         nextEntry: blogEntries[indexEntry + 1],
         prevEntry: blogEntries[indexEntry - 1],
         relatedArticles: findRelatedPostsByTag({
            currentPost: entry.data,
            maxRelatedPosts: 3,
            blogPosts: blogEntries,
         }),
      },
   }));
}

const { entry, nextEntry, prevEntry, relatedArticles } = Astro.props;
const isAdmin = !!Astro.cookies.get('isAdmin');

if (!isAdmin && entry.data.is_private) {
   return Astro.redirect('/404');
}

const { title, tags, excerpt, category } = entry.data;
---

<MainLayout
   title={entry.data.title}
   description={entry.data.excerpt}
   featured_image={entry.data.featured_image}
   frontmatter={entry}
>
   <ViewTransitions />
   <Breadcrumbs
      links={[
         { name: 'Inicio', path: '/' },
         { name: 'Blog', path: '/blog' },
         {
            name: title,
            path: `/blog/${entry.slug}`,
            linkIsActive: 'is-active',
         },
      ]}
   />
   <ArticleContainer ariaLabel={title}>
      <div class="article-top-prev-next-wrapper">
         <ArticleNavigation {prevEntry} {nextEntry} />
      </div>

      <div class="category-containter">
         <PostCardCategory
            href={`/blog/category/${slugify(category)}/`}
            text={category}
         />
      </div>

      <div class:list={['article-content']}>
         <TagHeading tag="h1" classes="article-main-heading">
            {title}
         </TagHeading>
         <TagHeading tag="h2" classes="article-main-heading-excerpt">
            {excerpt}
         </TagHeading>
         <div class="tags-wrapper">
            <Tags {tags} />
         </div>
         <div class="markdown-wrapper">
            <Markdown
               content={entry.body}
               sanitize={{ allowComponents: true }}
               components={{
                  img: MarkdownImages,
                  CodeBlock,
                  a: NormalizeLinks,
               }}
            />
            <ArticleInfoContainer>
               <ArticleAuthorContainer>
                  <ArticleAuthor post={entry} />
                  <ArticleReadingTime post={entry} />
               </ArticleAuthorContainer>
               <ArticleTools>
                  <xe-article-speech
                     class="tooltip"
                     title="Escuchar artículo"
                     data-tooltip-placement="top"
                  >
                     <button
                        aria-label="Escuchar artículo"
                        class="listen-article"
                        data-article-text={`título: ${title}, descripción: ${excerpt}, artículo: ${entry.body}`}
                        data-paused="false"></button>
                  </xe-article-speech>
                  <Modal id="shareSocial" ariaLabel="Compartir en las redes">
                     <Icon name="octicon:share-16" height="18" width="18" slot="open-modal" />
                     <SocialShareTitle slot="modal-title" />
                     <SocialShareOptions slot="modal-main" linkUrl={entry.slug} title={title} />
                     <SocialShareFooter slot="modal-footer" text={`https://xexiu.netlify.app/blog/${entry.slug}`} />
                  </Modal>
               </ArticleTools>
            </ArticleInfoContainer>
         </div>
      </div>
      <RelatedArticles {relatedArticles} />
      <FormCommentGiscus />
   </ArticleContainer>
</MainLayout>

<style>
   .category-containter {
      padding: 10px 0;
      margin: 10px 0;
      position: relative;
   }
   .share-article {
      width: 18px;
      height: 18px;
   }
</style>

<script>
   import { ArticleSpeech } from '@js/custom-elements';

   customElements.define('xe-article-speech', ArticleSpeech);
</script>

<script>
   const shareBtn = document.querySelector('.share-article') as HTMLElement;

   shareBtn?.addEventListener('click', (event: Event) => {
      event.preventDefault();
      const { articleTitle } = shareBtn.dataset;
      const { articleUrl } = shareBtn.dataset;

      if (navigator.share) {
         navigator
            .share({
               title: articleTitle,
               url: articleUrl,
            })
            .then(() => {
               // console.log('Thanks for sharing!');
            })
            .catch((err) => {
               // Handle errors, if occurred
               // console.log('Error while using Web share API:');
               // console.log(err);
            });
      }
   });
</script>
