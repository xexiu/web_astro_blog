---
import Breadcrumbs from '@components/breadcrumbs/Breadcrumbs.astro';
import {
   ArticleAuthor,
   ArticleAuthorContainer,
   ArticleInfoContainer,
   ArticleNavigation,
   ArticleReadingTime,
   ArticleTools,
} from '@components/article';
import CodeBlock from '@components/markdown/CodeBlock.astro';
import MarkdownImages from '@components/markdown/MarkdownImages.astro';
import NormalizeLinks from '@components/markdown/NormalizeLinks.astro';
import PostCardTags from '@components/postcard/PostCardTags.astro';
import MainLayout from '@layouts/MainLayout.astro';
import '@styles/blog.css';
import { Markdown } from 'astro-remote';
import { getCollection } from 'astro:content';
import { ViewTransitions } from 'astro:transitions';
import { Icon } from 'astro-icon';
import { findRelatedPostsByTag } from '@js/utils';
import RelatedArticles from '@components/RelatedArticles.astro';

// 1. Generate a new path for every collection entry

export async function getStaticPaths() {
   const blogEntries = await getCollection('blog');

   return blogEntries.map((entry, indexEntry) => ({
      params: { slug: entry.slug },
      props: {
         entry,
         indexEntry,
         nextEntry: blogEntries[indexEntry + 1],
         prevEntry: blogEntries[indexEntry - 1],
         relatedArticles: findRelatedPostsByTag(entry.data, 3, blogEntries),
      },
   }));
}

const { entry, nextEntry, prevEntry, relatedArticles } = Astro.props;
const { title, tags, excerpt } = entry.data;
---

<MainLayout
   title={entry.data.title}
   description={entry.data.excerpt}
   featured_image={entry.data.featured_image}
   frontmatter={entry}
>
   <ViewTransitions />
   <Breadcrumbs
      links={[
         { name: 'Inicio', path: '/' },
         { name: 'Blog', path: '/blog' },
         {
            name: title,
            path: `/blog/${entry.slug}`,
            linkIsActive: 'is-active',
         },
      ]}
   />
   <article class="article-content-wrapper" transition:animate="slide">
      <div class="article-top-prev-next-wrapper">
         <ArticleNavigation {prevEntry} {nextEntry} />
      </div>

      <div class:list={['article-content']}>
         <h1 class="article-main-heading">{title}</h1>
         <h2 class="article-main-heading-excerpt">{excerpt}</h2>
         <div class="tags-wrapper">
            <PostCardTags {tags} />
         </div>
         <RelatedArticles {relatedArticles} />
         <div class="markdown-wrapper">
            <Markdown
               content={entry.body}
               sanitize={{ allowComponents: true }}
               components={{
                  img: MarkdownImages,
                  CodeBlock,
                  a: NormalizeLinks,
               }}
            />
         </div>
         <ArticleInfoContainer>
            <ArticleAuthorContainer>
               <ArticleAuthor post={entry} />
               <ArticleReadingTime post={entry} />
            </ArticleAuthorContainer>
            <ArticleTools>
               <xe-article-speech
                  class="tooltip"
                  title="Escuchar artículo"
                  data-tooltip-placement="top"
               >
                  <button
                     aria-label="Escuchar artículo"
                     class="listen-article"
                     data-article-text={entry.body}
                     data-paused="false"></button>
               </xe-article-speech>
               <button
                  class="share-article tooltip"
                  title="Compartir artículo"
                  data-article-title={title}
                  data-article-url={`/blog/${entry.slug}`}
                  aria-label="Compartir artículo"
                  data-tooltip-placement="left"
               >
                  <Icon name="octicon:share-16" height="18" width="18" />
               </button>
            </ArticleTools>
         </ArticleInfoContainer>
      </div>
   </article>
</MainLayout>

<style>
   .share-article {
      width: 18px;
      height: 18px;
   }
</style>

<script>
   import { ArticleSpeech } from '@js/custom-elements';

   customElements.define('xe-article-speech', ArticleSpeech);
</script>

<script>
   const shareBtn = document.querySelector('.share-article') as HTMLElement;

   shareBtn?.addEventListener('click', (event: Event) => {
      event.preventDefault();
      const { articleTitle } = shareBtn.dataset;
      const { articleUrl } = shareBtn.dataset;

      // Fallback, Tries to use API only
      // if navigator.share function is
      // available

      if (navigator.share) {
         navigator
            .share({
               // Title that occurs over
               // web share dialog
               title: articleTitle,

               // URL to share
               url: articleUrl,
            })
            .then(() => {
               // console.log('Thanks for sharing!');
            })
            .catch((err) => {
               // Handle errors, if occurred
               // console.log('Error while using Web share API:');
               // console.log(err);
            });
      } else {
         // Alerts user if API not available
         alert('Browser doesn\'t support this API !');
      }
   });
</script>
