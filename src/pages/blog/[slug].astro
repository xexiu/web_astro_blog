---
import Breadcrumbs from '@components/Breadcrumbs.astro';
import {
   ArticleAuthor,
   ArticleAuthorContainer,
   ArticleInfoContainer,
   ArticleNavigation,
   ArticleReadingTime,
   ArticleTools,
} from '@components/article';
import CodeBlock from '@components/markdown/CodeBlock.astro';
import MarkdownImages from '@components/markdown/MarkdownImages.astro';
import NormalizeLinks from '@components/markdown/NormalizeLinks.astro';
import PostCardTags from '@components/postcard/PostCardTags.astro';
import MainLayout from '@layouts/MainLayout.astro';
import '@styles/blog.css';
import { Markdown } from 'astro-remote';
import { getCollection } from 'astro:content';
import { ViewTransitions } from 'astro:transitions';
import { Icon } from 'astro-icon';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
   const blogEntries = await getCollection('blog');

   return blogEntries.map((entry, indexEntry) => ({
      params: { slug: entry.slug },
      props: {
         entry,
         indexEntry,
         nextEntry: blogEntries[indexEntry + 1],
         prevEntry: blogEntries[indexEntry - 1],
      },
   }));
}

// 2. For your template, you can get the entry directly from the prop
const { entry, nextEntry, prevEntry } = Astro.props;
---

<MainLayout
   title={entry.data.title}
   description={entry.data.excerpt}
   featured_image={entry.data.featured_image}
   frontmatter={entry}
>
   <ViewTransitions />
   <Breadcrumbs
      links={[
         { name: 'Inicio', path: '/' },
         { name: 'Blog', path: '/blog' },
         {
            name: entry.data.title,
            path: `/blog/${entry.slug}`,
            linkIsActive: 'is-active',
         },
      ]}
   />
   <article class="article-content-wrapper" transition:animate="slide">
      <div class="article-top-prev-next-wrapper">
         <ArticleNavigation {prevEntry} {nextEntry} />
      </div>

      <div class:list={['article-content']}>
         <h1 class="article-main-heading">{entry.data.title}</h1>
         <h2 class="article-main-heading-excerpt">{entry.data.excerpt}</h2>
         <PostCardTags tags={entry.data.tags} />
         <ArticleInfoContainer>
            <ArticleAuthorContainer>
               <ArticleAuthor post={entry} />
               <ArticleReadingTime post={entry} />
            </ArticleAuthorContainer>
            <ArticleTools>
               <button title="Guardar artículo">
                  <Icon
                     name="uil:save"
                     height="18"
                     width="18"
                     class="save-article"
                  />
               </button>
               <xe-article-speech>
                  <button class="listen-article" data-article-text={entry.body} title="Escuchar artículo" data-paused="false"></button>
               </xe-article-speech>
               <button title="Compartir artículo" data-article-title={entry.data.title} data-article-url={entry.slug}>
                  <Icon
                     name="octicon:share-16"
                     height="18"
                     width="18"
                     class="share-article"
                  />
               </button>
            </ArticleTools>
         </ArticleInfoContainer>
         <Markdown
            content={entry.body}
            sanitize={{ allowComponents: true }}
            components={{ img: MarkdownImages, CodeBlock, a: NormalizeLinks }}
         />
      </div>
   </article>
</MainLayout>


   <script>
   const shareBtn = document.querySelector('.share-article') as HTMLElement;

   shareBtn?.addEventListener('click', (event: Event) => {
      event.preventDefault();
      const { articleTitle } = shareBtn.dataset;
      const { articleUrl } = shareBtn.dataset;

      // Fallback, Tries to use API only
      // if navigator.share function is
      // available

      if (navigator.share) {
         navigator.share({
            // Title that occurs over
            // web share dialog
            title: articleTitle,

            // URL to share
            url: articleUrl
         }).then(() => {
            console.log('Thanks for sharing!');
         }).catch((err) => {

            // Handle errors, if occurred
            console.log(
               'Error while using Web share API:');
            console.log(err);
         });
      } else {
         // Alerts user if API not available
         alert('Browser doesn\'t support this API !');
      }
   });
   </script>

<script>
class ArticleSpeech extends HTMLElement {
   constructor() {
      super();
      const icon = this.querySelector('.listen-article') as any;
      const utterance = new SpeechSynthesisUtterance();
      utterance.text = icon.dataset.articleText;
      utterance.voice = window.speechSynthesis.getVoices()[0];

      window.speechSynthesis.cancel();

      icon?.addEventListener('click', (event: Event) => {
         event.preventDefault();

         if(icon.classList.contains('pause')) {
            this.pause();
            icon.classList.toggle('pause');
         } else {
            this.play(utterance);
            icon.classList.toggle('pause');
         }
      });

      utterance.addEventListener('end', (event: Event) => {
         event.preventDefault();
         icon.classList.toggle('pause');
      });
   }

   play(text: SpeechSynthesisUtterance) {
      if (this.dataset.paused === 'true') {
         this.dataset.paused = 'false';
         window.speechSynthesis.resume();
      } else {
         window.speechSynthesis.speak(text);
      }
   }

   pause() {
      window.speechSynthesis.pause();
      this.dataset.paused = 'true';
   }
}

customElements.define('xe-article-speech', ArticleSpeech);
</script>

<style>
   .listen-article {
      border-color: transparent transparent transparent #202020;
      border-style: solid;
      border-width: 8px 0 7px 13px;
      box-sizing: border-box;
      cursor: pointer;
      height: 16px;
      transition: all 0.1s ease;
      will-change: border-width;
      display: block;
      &.pause {
         border-style: double;
         border-width: 0px 0 0px 13px;
      }
   }

   .article-content-wrapper {
      padding: 25px;
   }
   .article-content-wrapper a.markdown-link {
      padding: 5px 0;
      display: inline-block;
   }
   .article-top-prev-next-wrapper {
      display: flex;
      justify-content: space-between;
      height: 25px;
   }
   .article-main-heading {
      text-align: center;
      font-size: 3em;
      padding: 15px 0;
   }

   .article-main-heading-excerpt {
      font-weight: 200;
      color: #666;
      padding: 0 0 15px 0;
      text-align: center;
      line-height: 30px;
      font-size: 1em;
   }

   @media screen and (width <= 500px),
      screen and (width >= 600px),
      screen and (width >= 400px) {
      .article-content-wrapper {
         padding: 5px;
      }
   }
</style>
