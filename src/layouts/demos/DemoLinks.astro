---
const { paths, routeName } = Astro.props;

function getUniquePaths(paths: string[]) {
   const uniquePaths = new Set();

   for (const path in paths) {
      const segments = path.split('/');

      if (segments.length >= 2) {
         const route = routeName
            ? `/demos/${routeName}/${segments[1]}`
            : `/demos/${segments[1]}`;
         const cleanRoute = route.replace('.astro', '');
         uniquePaths.add(cleanRoute);
      }
   }

   return Array.from(uniquePaths);
}

const uniquePaths = getUniquePaths(paths);
const ariaLabel = routeName ? `${routeName} Demo Links` : 'Demo Links';
---

<nav role="navigation" aria-label={ariaLabel} vocab="https://schema.org/">
   <ol itemtype="https://schema.org/ItemList">
      <meta itemprop="numberOfItems" content={String(uniquePaths.length)} />
      {
         uniquePaths.map((path: string, index: number) => {
            return (
               <li
                  itemprop="itemListElement"
                  itemscope
                  itemtype="https://schema.org/ListItem"
               >
                  <a itemprop="item" data-normal-link class="internal-link" href={path}>
                     <span itemprop="name" class="suffix">
                        {routeName ? 'open ' : 'cd '}
                     </span>
                     {`${path.replace(`/demos/${routeName}/`, '')}`}
                  </a>
                  <meta property="position" content={String(index + 1)} />
               </li>
            );
         })
      }
   </ol>
</nav>

<style>
   nav {
      margin: 20px 0;
   }
   ol {
      list-style: none;
      counter-reset: item;
   }
   li {
      margin: 20px 0;
      text-transform: uppercase;
   }
   li:before {
      margin-right: 5px;
      content: "_";
      color: #222;
      width: 1.2em;
      text-align: center;
      display: inline-block;
      text-align: end;
   }

   .suffix {
      text-transform: none;
      color: #222;
   }
</style>
