---
import Tag from '@components/tags/Tag.astro';
import { getTagCounts } from '@js/utils';

interface Props {
   tags: string[];
   tagCounts?: object;
   classes?: string;
   showCountBadge?: boolean;
}
const { tags, tagCounts, showCountBadge = false, ...rest } = Astro.props;
const _tagCounts = showCountBadge ? getTagCounts(tags) : tagCounts;
const uniqueTags = [...new Set(tags)];
---

<div class="post-card-tags">
   {
      uniqueTags.map((tag: string) => {
         const count = (_tagCounts && _tagCounts[tag]) || '0';

         return (
            <span class="tag-container">
               <Tag {tag} data-number-tag={count} {...rest} />
               {showCountBadge && <span class="tag-count">{count}</span>}
            </span>
         );
      })
   }
</div>

<style is:inline>
   .post-card-tags {
      width: 100%;
      overflow: hidden;
      white-space: nowrap;
      display: flex;
      flex-wrap: wrap;
   }
   .tag-container {
      display: inline-block;
      white-space: nowrap;
      margin-right: 10px;

      .tag {
         background-color: ivory;
      }
      .tag-count {
         color: #666;
         text-shadow: 0 2px 3px rgb(255 255 255 / 80%);
         background-clip: text;
         border: 1px solid #999;
         border-radius: 2em;
         padding: 0 7px;
         vertical-align: middle;
         margin-right: 10px;
      }
   }
   .post-card-tags::-webkit-scrollbar {
      height: 3px;
   }
   .post-card-tags::-webkit-scrollbar-thumb {
      background: var(--color-red);
      border-radius: 5px;
   }

   .post-card-tags::-webkit-scrollbar-track {
      box-shadow: inset 0 0 6px rgb(0 0 0 / 30%);
      border-radius: 5px;
   }
</style>
