---
import { Icon } from 'astro-icon';
import type { Post } from 'types/utils';

interface Props {
    data: Post[];
}

const { data } = Astro.props;
---

<div class="search-box-container">
   <div class="search-box">
      <button class="btn-search">
         <Icon
            name="gg:search"
            height={26}
            width={26}
            class="search-icon"
            alt="Link externo"
         />
      </button>
      <input type="text" class="input-search" placeholder="Que es js?..." />
   </div>
   <div class="results-container">
      <ul class="results-list" id="list"></ul>
   </div>
</div>

<script define:vars={{ data }}>
const list = document.querySelector('#list');

function setList(results) {
   if (results.length === 0) {
      noResults();
   }

   for (const data of results) {
      // creating a li element for each result item
      const resultItem = document.createElement('li');
      const resultLink = document.createElement('a');
      resultLink.href = `/blog/${data.slug}`;

      // adding a class to each item of the results
      resultItem.classList.add('result-item');

      // grabbing the name of the current point of the loop and adding the name as the list item's text
      const text = document.createTextNode(data.title);
      resultLink.appendChild(text);

      // appending the text to the result item
      resultItem.appendChild(resultLink);

      // appending the result item to the list
      list.appendChild(resultItem);
   }
}

function noResults() {
   // create an element for the error; a list item ("li")
   const error = document.createElement('li');
   // adding a class name of "error-message" to our error element
   error.classList.add('error-message');

   // creating text for our element
   const text = document.createTextNode('Resultados no encontrados!');
   // appending the text to our element
   error.appendChild(text);
   // appending the error to our list element
   list.appendChild(error);
}

const searchInput = document.querySelector('.input-search');
const searchIcon = document.querySelector('.search-icon');
const searchBtn = document.querySelector('.btn-search');
const resultsContainer = document.querySelector('.results-container');

document.addEventListener('click', (e) => {
   if (!resultsContainer.contains(e.target) && e.target !== searchInput && e.target !== searchIcon && e.target !== searchBtn) {
      resultsContainer.style.display = 'none';
      searchInput.value = '';
   }
});

searchInput?.addEventListener('input', (e) => {
   list.innerHTML = '';
   const { value } = e.target;

   if (value && value.trim().length > 0) {
      const searchTerm = value.trim().toLowerCase();

      const filteredData = data
         .filter((d) => d.data.title.toLowerCase().includes(searchTerm))
         .map((d) => ({ title: d.data.title, slug: d.slug }));
      setList(filteredData);
   } else {
      list.innerHTML = '';
   }
});
</script>

<style is:inline>
    .results-container {
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        left: -120px;
        position: absolute;
        top: 120px;
        width: 100vw;
        z-index: 100000;
        display: block;
        padding: 0 20px;
    }
    .results-list {
        list-style: none;
        margin: 0;
    }
    .result-item a {
        text-decoration: none;
        color: #222;
        border-top: 1px solid #ddd;
        padding: 10px 0;
        display: flex;
    }
    .result-item a:hover {
        color: var(--color-red);
    }
    .search-box-container {
        position: relative;
        z-index: 10000;
        display: flex;
        height: 62px;
        align-items: center;
    }
    .search-box {
        width: fit-content;
        height: fit-content;
        position: relative;
        display: flex;
        height: 62px;
        position: absolute;
    }
    .input-search {
        height: 62px;
        width: 50px;
        border-style: none;
        padding: 10px;
        font-size: 18px;
        letter-spacing: 2px;
        outline: none;
        background-color: transparent;
        padding-right: 40px;
        color: #fff;
    }
    .input-search::placeholder {
        color: rgba(255, 255, 255, 0.5);
        font-size: 18px;
        letter-spacing: 2px;
        font-weight: 100;
    }
    .btn-search {
        width: 50px;
        height: 62px;
        border-style: none;
        font-size: 20px;
        font-weight: bold;
        outline: none;
        cursor: pointer;
        position: absolute;
        color: #ffffff;
        background-color: transparent;
        pointer-events: painted;
        display: flex;
        justify-content: center;
        align-items: center;
        & svg {
            margin-top: 5px;
        }
    }

    .btn-search:focus ~ .input-search,
    .input-search:focus {
        width: 100vw;
        background-color: #222;
        border-bottom: 2px solid rgba(255, 255, 255, 0.5);
        position: absolute;
        top: 62px;
        left: -120px;
        padding: 0 20px;
    }
</style>
